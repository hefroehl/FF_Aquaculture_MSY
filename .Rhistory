}
sraMSY	<-function(theta, N)
{
#This function conducts the stock reduction analysis
with(as.list(theta),
{
ri = exp(runif(N, log(r[1]), log(r[2])))  ## get N values between r[1] and r[2], assign to ri
ki = exp(runif(N, log(k[1]), log(k[2])))  ## get N values between k[1] and k[2], assing to ki
itheta=cbind(r=ri,k=ki, lam1=lambda[1],lam2=lambda[2], sigR=sigR) ## assign ri, ki, and final biomass range to itheta
M = apply(itheta,1,runModel) ## call Schaefer function with parameters in itheta
i=1:N
## prototype objective function
get.ell=function(i) M[[i]]$ell
ell = sapply(i, get.ell)
return(list(r=ri,k=ki, ell=ell))
})
}
## MAIN
R1 = sraMSY(parbound, n)
sraMSY	<-function(theta, N)
{
#This function conducts the stock reduction analysis
with(as.list(theta),
{
ri = exp(runif(N, log(r[1]), log(r[2])))  ## get N values between r[1] and r[2], assign to ri
ki = exp(runif(N, log(k[1]), log(k[2])))  ## get N values between k[1] and k[2], assing to ki
itheta=cbind(r=ri,k=ki, lam1=lambda[1],lam2=lambda[2]) ## assign ri, ki, and final biomass range to itheta
M = apply(itheta,1,runModel) ## call Schaefer function with parameters in itheta
i=1:N
## prototype objective function
get.ell=function(i) M[[i]]$ell
ell = sapply(i, get.ell)
return(list(r=ri,k=ki, ell=ell))
})
}
## MAIN
R1 = sraMSY(parbound, n)
## Get statistics on r, k, MSY and determine new bounds for r and k
r1 	<- R1$r[R1$ell==1]
k1 	<- R1$k[R1$ell==1]
msy1  <- r1*k1/4
mean_msy1 <- exp(mean(log(msy1)))
max_k1a  <- min(k1[r1<(1.1*parbound$r[1])]) ## smallest k1 near initial lower bound of r
max_k1b  <- max(k1[r1*k1/4<mean_msy1]) ## largest k1 that gives mean MSY
max_k1 <- if(max_k1a < max_k1b) {max_k1a} else {max_k1b}
if(length(r1)<10) {
cat("Too few (", length(r1), ") possible r-k combinations, check input parameters","\n")
flush.console()
}
r1
start_r     <- c(0.05,2)  # Initial r values - we use a big span to include all species
start_k     <- c(max(ct),100*max(ct)) ## default for upper k e.g. 100 * max catch
startbio    <- if(ct[1]/max(ct, na.rm =T) < 0.5) {c(0.5,0.9)} else {c(0.3,0.6)} ## use for batch processing
interyr 	<- yr[2]   ## interim year within time series for which biomass estimate is available; set to yr[2] if no estimates are available
interbio 	<- c(0, 1) ## biomass range for interim year, as fraction of k; set to 0 and 1 if not available
finalbio    <- if(ct[nyr]/max(ct, na.rm =T) > 0.5) {c(0.3,0.7)} else {c(0.01,0.5)} ## use for batch processing
n           <- 30000  # Expanding this number takes a lot of time
startbt     <- seq(startbio[1], startbio[2], by = 0.05) ## apply range of start biomass in steps of 0.05
parbound <- list(r = start_r, k = start_k, lambda = finalbio)
## FUNCTIONS
runModel	<- function(theta)
{
with(as.list(theta), {  ## for all combinations of ri & ki
bt=vector()
ell = 0  ## initialize ell
for (j in startbt)
{
if(ell == 0)
{
bt[1]=j*k  ## set biomass in first year
for(i in 1:nyr) ## run the Schaefer model
{
bt[i+1]=(bt[i]+r*bt[i]*(1-bt[i]/k)-ct[i]) ## calculate biomass as function of previous year's biomass plus net production minus catch
}
#Bernoulli likelihood
ell = 0
if(bt[nyr+1]/k>=lam1 && bt[nyr+1]/k <=lam2 && min(bt) > 0 && max(bt) <=k &&
bt[which(yr==interyr)]/k>=interbio[1] && bt[which(yr==interyr)]/k<=interbio[2])
ell = 1
}
}
return(list(ell=ell))
})
}
sraMSY	<-function(theta, N)
{
#This function conducts the stock reduction analysis
with(as.list(theta),
{
ri = exp(runif(N, log(r[1]), log(r[2])))  ## get N values between r[1] and r[2], assign to ri
ki = exp(runif(N, log(k[1]), log(k[2])))  ## get N values between k[1] and k[2], assing to ki
itheta=cbind(r=ri,k=ki, lam1=lambda[1],lam2=lambda[2]) ## assign ri, ki, and final biomass range to itheta
M = apply(itheta,1,runModel) ## call Schaefer function with parameters in itheta
i=1:N
## prototype objective function
get.ell=function(i) M[[i]]$ell
ell = sapply(i, get.ell)
return(list(r=ri,k=ki, ell=ell))
})
}
## MAIN
R1 = sraMSY(parbound, n)
## Get statistics on r, k, MSY and determine new bounds for r and k
r1 	<- R1$r[R1$ell==1]
k1 	<- R1$k[R1$ell==1]
msy1  <- r1*k1/4
mean_msy1 <- exp(mean(log(msy1)))
max_k1a  <- min(k1[r1<(1.1*parbound$r[1])]) ## smallest k1 near initial lower bound of r
max_k1b  <- max(k1[r1*k1/4<mean_msy1]) ## largest k1 that gives mean MSY
max_k1 <- if(max_k1a < max_k1b) {max_k1a} else {max_k1b}
if(length(r1)<10) {
cat("Too few (", length(r1), ") possible r-k combinations, check input parameters","\n")
}
## set new upper bound of r to 1.2 max r1
parbound$r[2] <- 1.2*max(r1)
## set new lower bound for k to 0.9 min k1 and upper bound to max_k1
parbound$k 	  <- c(0.9 * min(k1), max_k1)
cat("First MSY =", format(1000*mean_msy1, digits=3),"\n")
cat("First r =", format(exp(mean(log(r1))), digits=3),"\n")
cat("New upper bound for r =", format(parbound$r[2],digits=2),"\n")
cat("New range for k =", format(1000*parbound$k[1], digits=3), "-", format(1000*parbound$k[2],digits=3),"\n")
## Repeat analysis with new r-k bounds
R1 = sraMSY(parbound, n)
## Get statistics on r, k and msy
r = R1$r[R1$ell==1]
k = R1$k[R1$ell==1]
msy = r * k / 4
mean_ln_msy = mean(log(msy))
par(mfcol=c(2,3))
plot(yr, ct, type="l", ylim = c(0, max(ct)), xlab = "Year", ylab = "Catch", main = species)
abline(h=exp(mean(log(msy))),col="red", lwd=2)
abline(h=exp(mean_ln_msy - 2 * sd(log(msy))),col="red")
abline(h=exp(mean_ln_msy + 2 * sd(log(msy))),col="red")
hist(r, freq=F, xlim=c(0, 1.2 * max(r)), main = "")
abline(v=exp(mean(log(r))),col="red",lwd=2)
abline(v=exp(mean(log(r))-2*sd(log(r))),col="red")
abline(v=exp(mean(log(r))+2*sd(log(r))),col="red")
plot(r1, k1, xlim = start_r, ylim = start_k, xlab="r", ylab="k (1000t)")
hist(k, xlim=c(0, 1.2 * max(k)), xlab="k (1000t)", main = "")
abline(v=exp(mean(log(k))),col="red", lwd=2)
abline(v=exp(mean(log(k))-2*sd(log(k))),col="red")
abline(v=exp(mean(log(k))+2*sd(log(k))),col="red")
plot(log(r), log(k),xlab="ln(r)",ylab="ln(k)")
abline(v=mean(log(r)))
abline(h=mean(log(k)))
abline(mean(log(msy))+log(4),-1, col="red",lwd=2)
abline(mean(log(msy))-2*sd(log(msy))+log(4),-1, col="red")
abline(mean(log(msy))+2*sd(log(msy))+log(4),-1, col="red")
hist(msy, freq=F, xlim=c(0, 1.2 * max(msy)), xlab="MSY (1000t)",main = "")
abline(v=exp(mean(log(msy))),col="red", lwd=2)
abline(v=exp(mean_ln_msy - 2 * sd(log(msy))),col="red")
abline(v=exp(mean_ln_msy + 2 * sd(log(msy))),col="red")
MSY <- read.csv('CatchMSY_Nis_FAOAreas_2nd_test.csv')
head(MSY)
MSY <- read.csv('CatchMSY_Nis_FAOAreas.csv')
head(MSY)
df.msy <- read.csv('CatchMSY_Nis_FAOAreas.csv', sep = ',')
df.msy2 <- read.csv('CatchMSY_Nis_FAOAreas_2nd_test.csv', header = F, sep = ',')
names(df.msy2) <- names(df.msy)
df.msy$stock <- paste(df.msy$Species,df.msy$Area)
df.msy2$stock <- paste(df.msy2$Species,df.msy2$Area)
df.msy.all <- rbind(df.msy,df.msy2)
df.msy.all <- df.msy.all[-which(duplicated(df.msy.all$stock) == 1),]# remove dupes
sum(df.msy.all$median.msy.)/sum(MSY$median.msy.)
# sum of MSY
SE <- c(sum(df.msy.all$quantile05msy),sum(df.msy.all$quantilemsyr95))
df.tmp = data.frame(Catch = c(sumForage$Catch[length(sumForage$Catch)], sum(df.msy.all$median.msy.)),
Year = c(2012,2050))
y.ml <- lm(log(Catch) ~ Year, data = df.tmp)
df.msy <- read.csv('CatchMSY_Nis_FAOAreas.csv', sep = ',')
df.msy2 <- read.csv('CatchMSY_Nis_FAOAreas_2nd_test.csv', header = F, sep = ',')
setwd("C:/Users/Nis/Dropbox/UW/Aquaculture Halley")
source('getRAM.R')
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
# Load in the relevant species
#PNAS.dat <- read.csv('PNAS_w_lifehist.csv')
marine.df <- read.csv('faocatches.csv')
marine.df$size[marine.df$Species == 'Brevoortia tyrannus'] = 'Small'
marine.df$size[marine.df$Species == 'Trachurus murphyi'] = 'Small'
marine.df$size[marine.df$Species == 'Trachurus trachurus'] = 'Small'
# # Load the PNAS data and compare
# PNAS <- read.csv('PNAS_w_lifehist.csv')
# PNAS <- PNAS[PNAS$Linf < 50, ]
# PNAS.sum <- PNAS %>%
#   group_by(Year) %>%
#   summarise(Catch = sum(Catch, na.rm = T))
# Max catch
marine.df <- marine.df[order(marine.df$Catch, decreasing = T),]
# Add bony fish to 'unknown'
marine.df$size[marine.df$Species == 'Osteichthyes'] = 'Unknown'
# How large of a fraction of unknown are bony fish?
sum(marine.df$Catch[marine.df$Species == 'Osteichthyes'], na.rm = T)/sum(marine.df$Catch[marine.df$size == 'Unknown'], na.rm = T)
# Plot the total, small and medium
marine.df.sum <- marine.df %>%
group_by(Year, size) %>%
summarise(Catch = sum(Catch, na.rm = T))
sumCatch <- marine.df.sum %>%
group_by(Year) %>%
summarise(Catch = sum(Catch, na.rm = T))
p1 <- ggplot(marine.df.sum, aes(x= Year, y = Catch*1e-6, color= size))+geom_line()+theme_classic()+
scale_y_continuous('Catch (million tonnes)')
p1
## Plot the fraction of forage
marine.small <- marine.df.sum[marine.df.sum$size == 'Small',]
ggplot(marine.small, aes(x = Year, y = Catch, group = 1))+geom_line()
plot(marine.df.sum[marine.df.sum$size == 'Small',]$Year,marine.df.sum[marine.df.sum$size == 'Small',]$Catch, type = 'l')
#lines(PNAS.sum$Year,PNAS.sum$Catch)
# jpeg('Figures/FF_totcatch.jpg', width = 16, height = 12, res = 500, unit = 'cm')
# grid.arrange(p1,p2)
# dev.off()
df.Forage <- marine.df[marine.df$size == 'Small',]
df.Forage$stock <- paste(df.Forage$Species,df.Forage$Fishingarea, sep = '-')
sp <- unique(df.Forage$Species)
# df.med <- marine.df[marine.df$size == 'Medium',]
# df.med <- df.med[df.med$Year == 2012,]
# df.med <- df.med[order(df.med$Catch, decreasing = T),]
# Tag some of the known forage fishes
# Order by total catch in year 2010
df.2010 <- df.Forage[df.Forage$Year == 2012,]
# Find the unique species (or genus)
df.2010 <- df.2010 %>%
group_by(Species) %>%
summarise(Catch = sum(Catch, na.rm = T))
df.2010 <- df.2010[order(df.2010$Catch, decreasing = T),]
df.2010$frac <- df.2010$Catch/sum(df.2010$Catch, na.rm = T)
df.2010$csum <- cumsum(df.2010$frac)
# Create table for export
df.2010exp <- data.frame(Species = df.2010$Species[1:20], Catch = df.2010$Catch[1:20])
#write.table(df.2010exp, file = 'forage20exp.csv', sep = '\t',row.names = F)
sumForage <- df.Forage %>%
group_by(Year) %>%
summarise(Catch = sum(Catch, na.rm =T))
# Look at 2010
# Calculate the mean - variability (SE) for all species for da plot
#
# Forage <- df.Forage %>%
#   group_by(Year,Species) %>%
#   summarise(Catch = sum(Catch, na.rm = T), Lmax = mean(Lmax, na.rm = T),
#             M = mean(M, na.rm = T), K = mean(K, na.rm = T))
# Forage <- Forage[Forage$Year > 1961,]
Forage <- df.Forage %>%
group_by(Year,Species) %>%
summarise(Catch = sum(Catch, na.rm = T), wmax = mean(wmax, na.rm = T))
Forage <- Forage[Forage$Year > 1961,]
Forage <- Forage[order(Forage$Catch, decreasing = T),]
nspecies <- length(unique(Forage$Species))
species <- unique(Forage$Species)
Mcatch <- matrix(NA, nspecies)
SDcatch <- matrix(NA, nspecies)
SEcatch <- matrix(NA, nspecies)
for (i in 1:nspecies){
idx <- which(Forage$Species[Forage$Year > 1980] == species[i])
Mcatch[i] <- mean(Forage$Catch[idx], na.rm =T)
SDcatch[i] <- sd(Forage$Catch[idx], na.rm =T)
SEcatch[i] <- SDcatch[i]/sqrt(length(idx))
}
# Plot from 85 onwards, mean after
feed.history <- read.csv('Feed projection.csv')
#feed.projection <- read.csv('ALL_ForageFish_results.csv')
feed.projection <- read.csv('New_Estimates2.csv')
year <- seq(2012,2050)
# Landings increase over the last 60 years
mean(sumForage[54:63,]$Catch)/mean(sumForage[11:20,]$Catch)
newdata <- data.frame(year = year, Cmedian = mean(sumForage$Catch[sumForage$Year > 1980], na.rm = T),
SE = sd(sumForage$Catch))
# jpeg('C:/Users/Nis/Dropbox/UW/Aquaculture Halley/Figures/TotalUSE.jpg', width = 16, height = 12, units = 'cm', res = 600)
#
#
# plot(sumForage$Year[sumForage$Year > 1961], sumForage$Catch[sumForage$Year > 1961]*1e-6, type = 'l', xlim = c(1960,2048),
#      ylim = c(10,40), xlab = 'year', ylab = 'Total forage fish catch (million tonnes)', lwd = 2)
#
# lines(newdata$year, newdata$Cmedian*1e-6, col = alpha('black', alpha = 0.8), lwd = 2)
# lines(feed.history$Year,feed.history$Pelagic.Fish*1e-6, lwd = 2, col = alpha('blue', alpha = 0.6))
# polygon(c(newdata$year, rev(newdata$year)), c(newdata$Cmedian*1e-6+newdata$SE*1e-6, rev(newdata$Cmedian*1e-6-newdata$SE*1e-6)),
#         border = NA, col = alpha('black', alpha = 0.15))
#
# for (i in 1:dim(feed.projection)[1]){
#   lines(c(2013,2048), c(feed.projection$Mean[1], feed.projection$Mean[i])*1e-6,
#         col = alpha(1+i, alpha = 0.8), lty = i)
#
#     polygon(c(c(2013,2048), rev(c(2013,2048))),
#             c(
#               c(feed.projection$Mean[1]+2*feed.projection$SE[i], feed.projection$Mean[i]+feed.projection$SE[i])*1e-6,
#               rev(c(feed.projection$Mean[1]-2*feed.projection$SE[i], feed.projection$Mean[i]-feed.projection$SE[i])*1e-6)),
#           border = NA, col = alpha(1+i,alpha = 0.15))
#
#
#   }
# lines(rep(2017, 100), seq(0,1e20, length.out = 100), lty = 16)
# legend('topleft', legend= feed.projection$Scenario,
#        lty = 1:5, col = 2:10, bty = 'n')
#
# dev.off()
# Plot in ggplot
sumForage$scenario <- 'Historic Catch'
sumForage$SE <- NA
newdata <- data.frame(Year = year, Catch = mean(sumForage$Catch[sumForage$Year > 1980], na.rm = T),
SE = NA, scenario = 'avg. Historic catch > 1980')
newdata$SE <- sd(sumForage$Catch[sumForage$Year > 1980], na.rm = T)/sqrt(nspecies)
newdata$SD <- sd(sumForage$Catch[sumForage$Year > 1980], na.rm = T)
# Add the projection data
tmp <- rep(NA, length(feed.projection$Mean)*2)
tmp[seq(2,length(feed.projection$Mean)*2, by = 2)] <- feed.projection$Mean
tmp[seq(1,length(feed.projection$Mean)*2-1, by = 2)] <- feed.projection$Mean[1]
proj <- data.frame(Year = rep(c(2012,2050),length(feed.projection$Mean)*2),
Catch = tmp,
SE = rep(feed.projection$SE,each = 2),
scenario = rep(feed.projection$Scenario,each = 2))
## Remove some of the scenarions keep for later
# scns <- unique(proj$scenario)
# proj <- proj[-which(proj$scenario == scns[5]),]
# proj <- proj[-which(proj$scenario == scns[6]),]
# proj <- proj[-which(proj$scenario == scns[1]),]
# Make exponential growth towards 2050
scns <- unique(proj$scenario)
yr <- 2012:2050
df.plot <- data.frame(
scenario = rep(scns, each = length(yr)),
Year = rep(yr, length(scns)),
Catch = NA,
SE = NA)
for (i in 1:length(scns)){
df.tmp <- proj[proj$scenario == scns[i],]
y.ml <- lm(log(Catch) ~ Year, data = df.tmp)
y.pred <- exp(predict(y.ml, newdata = data.frame(Year = yr)))
df.plot[df.plot$scenario == scns[i],]$Catch <- y.pred
df.plot[df.plot$scenario == scns[i],]$SE <- df.tmp$SE[1]
}
pelfish <- data.frame(Year = feed.history$Year,
Catch = feed.history$Pelagic.Fish, scenario = 'Feed use', SE = NA)
# sumForage.plot <- rbind(sumForage,newdata, proj, pelfish) # for plotting
# sumForage.feed <- rbind(proj,pelfish)
df.msy <- read.csv('CatchMSY_Nis_FAOAreas.csv', sep = ',')
df.msy2 <- read.csv('CatchMSY_Nis_FAOAreas_2nd_test.csv', header = F, sep = ',')
names(df.msy2) <- names(df.msy)
df.msy$stock <- paste(df.msy$Species,df.msy$Area)
df.msy2$stock <- paste(df.msy2$Species,df.msy2$Area)
df.msy.all <- rbind(df.msy,df.msy2)
df.msy.all <- df.msy.all[-which(duplicated(df.msy.all$stock) == 1),]# remove dupes
# sum of MSY
SE <- c(sum(df.msy.all$quantile05msy),sum(df.msy.all$quantilemsyr95))
df.tmp = data.frame(Catch = c(sumForage$Catch[length(sumForage$Catch)], sum(df.msy.all$median.msy.)),
Year = c(2012,2050))
plot(df.tmp$Year,df.tmp$Catch)
df.tmp
y.ml <- lm(log(Catch) ~ Year, data = df.tmp)
y.pred <- exp(predict(y.ml, newdata = data.frame(Year = yr)))
y.pred
plot(y.pred)
y.pred <- rep(df.tmp$Catch[2], length(yr))
y.pred
df.tmp = data.frame(Catch = c(sumForage$Catch[length(sumForage$Catch)], sum(df.msy.all$median.msy.)),
Year = c(2012,2050))
y.pred <- rep(df.tmp$Catch[2], length(yr))
# Find the difference between median and SE's
SE.diff <- c(sum(df.msy.all$median.msy.)-SE[1],SE[2]-sum(df.msy.all$median.msy.))
MSY <- data.frame(Catch = y.pred,
Year = yr,scenario = 'MSY', SE.min = y.pred-SE.diff[1], SE.max = y.pred+SE.diff[2])
sum(df.msy.all$median.msy.)
setwd("~/GitHub/FF_Aquaculture_MSY")
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
# Load in the relevant species
marine.df <- read.csv('marinecatches.csv')
feed.history <- read.csv('Feed projection.csv') # Feed projections
#feed.projection <- read.csv('ALL_ForageFish_results.csv')
feed.projection <- read.csv('New_Estimates2.csv')
MSY <- read.csv('CatchMSY_Nis_FAOAreas.csv')
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
# Load in the relevant species
marine.df <- read.csv('marinecatches.csv')
feed.history <- read.csv('Feed projection.csv') # Feed projections
#feed.projection <- read.csv('ALL_ForageFish_results.csv')
feed.projection <- read.csv('scenarios.csv')
MSY <- read.csv('CatchMSY_Nis_FAOAreas.csv')
# Sum Catches over year and size
marine.df.sum <- marine.df %>%
group_by(Year, size) %>%
summarise(Catch = sum(Catch, na.rm = T))
sumCatch <- marine.df.sum %>%
group_by(Year) %>%
summarise(Catch = sum(Catch, na.rm = T))
p1 <- ggplot(marine.df.sum, aes(x= Year, y = Catch*1e-6, group= size, color = size))+geom_line()+theme_classic()+geom_line(data=)+
scale_y_continuous('Catch (million tonnes)')
p1
## Plot the fraction of forage fish
p2 <- ggplot(data= marine.df.sum[marine.df.sum$size == 'Small',], aes(x = Year, y= Catch/sumCatch$Catch, group =1) )+geom_line()+theme_classic()+
scale_y_continuous('Fraction forage fish of total catch')
p2
df.Forage <- marine.df[marine.df$size == 'Small',] # Subset of catches that are forage fish
df.Forage$stock <- paste(df.Forage$Species,df.Forage$Fishingarea, sep = '-') # Unique FAO stock
sp <- unique(df.Forage$Species)
# Order by total catch in year 2012
df.2010 <- df.Forage[df.Forage$Year == 2012,]
# Find the unique species (or genus)
df.2010 <- df.2010 %>%
group_by(Species) %>%
summarise(Catch = sum(Catch, na.rm = T))
df.2010 <- df.2010[order(df.2010$Catch, decreasing = T),]
# Calculate the forage fish that contribute the most to total catch
df.2010$frac <- df.2010$Catch/sum(df.2010$Catch, na.rm = T)
df.2010$csum <- cumsum(df.2010$frac)
# Create table for export
df.2010exp <- data.frame(Species = df.2010$Species[1:20], Catch = df.2010$Catch[1:20])
sumForage <- df.Forage %>%
group_by(Year) %>%
summarise(Catch = sum(Catch, na.rm =T))
Forage <- df.Forage %>%
group_by(Year,Species) %>%
summarise(Catch = sum(Catch, na.rm = T), wmax = mean(wmax, na.rm = T))
Forage <- Forage[Forage$Year > 1961,]
Forage <- Forage[order(Forage$Catch, decreasing = T),]
nspecies <- length(unique(Forage$Species))
species <- unique(Forage$Species)
Mcatch <- matrix(NA, nspecies)
SDcatch <- matrix(NA, nspecies)
SEcatch <- matrix(NA, nspecies)
for (i in 1:nspecies){
idx <- which(Forage$Species[Forage$Year > 1980] == species[i])
Mcatch[i] <- mean(Forage$Catch[idx], na.rm =T)
SDcatch[i] <- sd(Forage$Catch[idx], na.rm =T)
SEcatch[i] <- SDcatch[i]/sqrt(length(idx))
}
year <- seq(2012,2050)
# Landings increase over the last 60 years
newdata <- data.frame(year = year, Cmedian = mean(sumForage$Catch[sumForage$Year > 1980], na.rm = T),
SE = sd(sumForage$Catch))
# Plot in ggplot
sumForage$scenario <- 'Historic Catch'
sumForage$SE <- NA
newdata <- data.frame(Year = year, Catch = mean(sumForage$Catch[sumForage$Year > 1980], na.rm = T),
SE = NA, scenario = 'avg. Historic catch > 1980')
newdata$SE <- sd(sumForage$Catch[sumForage$Year > 1980], na.rm = T)/sqrt(nspecies)
newdata$SD <- sd(sumForage$Catch[sumForage$Year > 1980], na.rm = T)
# Add the projection data
tmp <- rep(NA, length(feed.projection$Mean)*2)
tmp[seq(2,length(feed.projection$Mean)*2, by = 2)] <- feed.projection$Mean
tmp[seq(1,length(feed.projection$Mean)*2-1, by = 2)] <- feed.projection$Mean[1]
proj <- data.frame(Year = rep(c(2012,2050),length(feed.projection$Mean)*2),
Catch = tmp,
SE = rep(feed.projection$SE,each = 2),
scenario = rep(feed.projection$Scenario,each = 2))
# Make exponential growth towards 2050
scns <- unique(proj$scenario)
# Make exponential growth towards 2050
scns <- unique(proj$scenario)
yr <- 2012:2050
df.plot <- data.frame(
scenario = rep(scns, each = length(yr)),
Year = rep(yr, length(scns)),
Catch = NA,
SE = NA)
for (i in 1:length(scns)){
df.tmp <- proj[proj$scenario == scns[i],]
y.ml <- lm(log(Catch) ~ Year, data = df.tmp)
y.pred <- exp(predict(y.ml, newdata = data.frame(Year = yr)))
df.plot[df.plot$scenario == scns[i],]$Catch <- y.pred
df.plot[df.plot$scenario == scns[i],]$SE <- df.tmp$SE[1]
}
pelfish <- data.frame(Year = feed.history$Year,
Catch = feed.history$Pelagic.Fish, scenario = 'Feed use', SE = NA)
# Plot the feed scenarios and the catch scenarios
# Find the order of scenarios
scen.order <- proj[proj$Year == 2050,]
scen.order <- scen.order[order(scen.order$Catch, decreasing = T),]
brks <- scen.order$scenario
##
pelfishMean <- data.frame(Year = year,
Catch = rep(mean(pelfish$Catch[pelfish$Year > 1980]),length(year)),
SD = rep(sd(pelfish$Catch[pelfish$Year > 1980]),length(year)),
scenario = 'Historical feed')
p1 <- ggplot(df.plot, aes(x = Year, y = Catch*1e-6, color = scenario))+
geom_line(linetype = 'dashed')+theme_classic()+
geom_ribbon(aes(ymin = (Catch-SE)*1e-6, ymax = (Catch+SE)*1e-6, fill = scenario), alpha = 0.15, linetype = 0)+
geom_line(data = pelfish, col = alpha('red3', alpha = 0.8), linetype = 'dashed')+
#  geom_line(data = pelfishMean, col = alpha('red3', alpha = 0.8), linetype = 'dashed')+
#geom_ribbon(data = pelfishMean, fill = alpha('red3'), alpha = 0.3, linetype = 0,
#            aes(ymin = (Catch-SD)*1e-6, ymax = (Catch+SD)*1e-6 ))+
geom_line(data= sumForage, col = alpha('dodgerblue', alpha = 1),aes(y = Catch*1e-6*.9))+
geom_line(data = newdata, col = alpha('dodgerblue', alpha = 1), aes(y = Catch*1e-6*0.9))  +
# geom_ribbon(data = newdata, aes(x = Year,
#                                 ymin = (Catch-SD)*1e-6*0.9,
#                                 ymax = (Catch+SD)*1e-6*0.9),
#                                 fill = 'dodgerblue', alpha= 0.3, linetype = 0)+
geom_vline(xintercept = 2012, linetype = 2, color = 'black')+
geom_line(data = MSY, col = 'royalblue3', aes(y = Catch*1e-6*0.9))+
#   geom_ribbon(data = MSY, aes(x = Year, ymin = SE.min*1e-6*0.9, ymax = SE.max*1e-6*0.9), fill = 'royalblue4', alpha= 0.3, linetype = 0)+
scale_y_continuous('Biomass (million tonnes)')+
annotate('text',x = 2025, y = 45, label = 'Projected max supply', colour = 'royalblue3', size = 2)+
annotate('text',x = 2035, y = 12, label = 'Avg. historical supply (>1980)', colour = 'dodgerblue', size = 2)+
annotate('text',x = 1995, y = 35, label = 'Historical supply', colour = 'dodgerblue', size = 2)+
annotate('text',x = 1990, y = 10, label = 'Historical feed use', colour = 'red3', size = 2)+
scale_color_discrete("", breaks = brks)+
guides(fill = FALSE, color=guide_legend(override.aes=list(fill=NA)))+
theme(legend.position=c(.18,.8),text = element_text(size=8),
legend.text = element_text(size=7),legend.direction = "vertical",
plot.margin=unit(c(0,0.3,0.2,0.2), "cm"),
legend.background = element_rect(fill="transparent"),
legend.key.width=unit(0.7,"line"),
legend.key.height=unit(0.7,"line"))
p1
MSY\
MSY
CatchMSY <- read.csv('CatchMSY_Nis_FAOAreas.csv')
